{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","numberWithCommas","x","toString","pattern","test","replace","aggregate","query","duration","length","className","unsupported","timings","res","reduce","pv","cv","count","Benchmark","props","state","mode","tag","evt","this","setState","target","value","queries","undefined","filter","tags","indexOf","engines","mode_data","data","engine","engine_queries","Array","from","filterQueries","map","total","min","query_data","min_engine","min_microsecs","max_engine","max_microsecs","engine_data","variation","data_view","generateDataView","htmlFor","id","onChange","handleChangeMode","modes","key","handleChangeTag","Object","keys","entries","kv","engine_stats","p","cell_data","toFixed","React","Component","$","getJSON","tags_set","Set","push","add","sort","el","document","getElementById","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c66c7816.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport $ from 'jquery';\nimport ReactDOM from 'react-dom';\nimport './style.scss'\nimport * as serviceWorker from './serviceWorker';\n\nfunction formatPercentVariation(p) {\n  if (p != undefined) {\n    return \"+\" + (p * 100).toFixed(1) + \" %\";\n  } else {\n    return \"\";\n  }\n}\n\nfunction numberWithCommas(x) {\n  var x = x.toString();\n  let pattern = /(-?\\d+)(\\d{3})/\n  while (pattern.test(x)) {\n    x = x.replace(pattern, \"$1,$2\");\n  }\n  return x;\n}\n\nfunction stats(timings) {\n  let median = timings[(timings.length / 2) | 0];\n  let mean = timings.reduce(((pv, cv) => pv + cv), 0) / timings.length;\n  return {\n    \"median\": median,\n    \"mean\": mean,\n    \"min\": timings[0],\n    \"max\": timings[timings.length - 1]\n  };\n}\n\nfunction aggregate(query) {\n  if (query.duration.length == 0) {\n    return { query: query.query, className: \"unsupported\", unsupported: true }\n  }\n  var res = stats(query.duration);\n  res.count = query.count;\n  res.query = query.query;\n  return res;\n}\n\n\nclass Benchmark extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      mode: \"TOP_10\",\n      tag: null\n    };\n  }\n\n  handleChangeMode(evt) {\n    this.setState({ mode: evt.target.value });\n  }\n\n  handleChangeTag(evt) {\n    var tag = evt.target.value;\n    if (tag == \"ALL\") {\n      this.setState({ \"tag\": null });\n    } else {\n      this.setState({ \"tag\": tag });\n    }\n  }\n\n  filterQueries(queries) {\n    let tag = this.state.tag;\n    if (tag != undefined) {\n      return queries.filter(query => query.tags.indexOf(tag) >= 0);\n    } else {\n      return queries;\n    }\n  }\n\n  generateDataView() {\n    return {};\n  }\n\n  generateDataView() {\n    var engines = {}\n    var queries = {}\n    var mode_data = this.props.data[this.state.mode];\n    for (var engine in mode_data) {\n      var engine_queries = mode_data[engine];\n      engine_queries = Array.from(this.filterQueries(engine_queries));\n      engine_queries = engine_queries.map(aggregate);\n      var total = 0\n      var unsupported = false\n      for (var query of engine_queries) {\n        if (query.unsupported) {\n          unsupported = true;\n        } else {\n          total += query.min;\n        }\n      }\n      if (unsupported) {\n        total = undefined;\n      } else {\n        total = (total / engine_queries.length) | 0;\n      }\n      engines[engine] = total;\n      for (var query of engine_queries) {\n        var query_data = {};\n        if (queries[query.query] != undefined) {\n          query_data = queries[query.query];\n        }\n        query_data[engine] = query\n        queries[query.query] = query_data\n      }\n    }\n\n    for (var query in queries) {\n      var query_data = queries[query];\n      var min_engine = null;\n      var min_microsecs = 0;\n      var max_engine = null;\n      var max_microsecs = 0;\n      for (var engine in query_data) {\n        var engine_data = query_data[engine];\n        if (engine_data.unsupported)\n          continue;\n        if (min_engine == null || engine_data.min < min_microsecs) {\n          min_engine = engine;\n          min_microsecs = engine_data.min;\n        }\n        if (max_engine == null || engine_data.min > max_microsecs) {\n          max_engine = engine;\n          max_microsecs = engine_data.min;\n        }\n      }\n      for (var engine in query_data) {\n        var engine_data = query_data[engine];\n        if (engine_data.unsupported) continue;\n        if (engine != min_engine) {\n          engine_data.variation = (engine_data.min - min_microsecs) / min_microsecs;\n        }\n      }\n      if (min_engine != null) {\n        // Only useful if at least one engine supports this query \n        query_data[min_engine].className = \"fastest\";\n        query_data[max_engine].className = \"slowest\";\n      }\n    }\n    return { engines, queries };\n  }\n\n  render() {\n    var data_view = this.generateDataView();\n    return <div>\n      <form>\n        <fieldset>\n          <label htmlFor=\"collectionField\">Collection type</label>\n          <select id=\"collectionField\" onChange={evt => this.handleChangeMode(evt)}>\n            {this.props.modes.map((mode) => <option value={mode} key={mode}>{mode}</option>)}\n          </select>\n          <label htmlFor=\"queryTagField\">Type of Query</label>\n          <select id=\"queryTagField\" onChange={(evt) => this.handleChangeTag(evt)}>\n            <option value=\"ALL\" key=\"all\">ALL</option>\n            {this.props.tags.map((tag) => <option value={tag} key={tag}>{tag}</option>)}\n          </select>\n        </fieldset>\n      </form>\n      <hr />\n      <table>\n        <thead>\n          <tr>\n            <th>Query</th>\n            {\n              Object.keys(data_view.engines).map((engine) => <th key={\"col-\" + engine}>{engine}</th>)\n            }\n          </tr>\n        </thead>\n        <tbody>\n          <tr className=\"average-row\">\n            <td>AVERAGE</td>\n            {\n              Object.entries(data_view.engines).map(kv => {\n                var engine = kv[0];\n                var engine_stats = kv[1];\n                if (engine_stats != undefined) {\n                  return <td key={\"result-\" + engine}>\n                    {numberWithCommas(engine_stats)} μs\n                </td>;\n                } else {\n                  return <td key={\"result-\" + engine}>\n                    Some Unsupported Queries\n                </td>;\n                }\n              })\n            }\n          </tr>\n          {\n            Object.entries(data_view.queries).map(kv => {\n              var query = kv[0];\n              var engine_queries = kv[1];\n              return <tr>\n                <td>{query}</td>\n                {\n                  Object.keys(data_view.engines).map(engine => {\n                    var cell_data = engine_queries[engine];\n                    if (cell_data.unsupported) {\n                      return <td className={\"data \" + cell_data.className}></td>;\n                    } else {\n                      return <td className={\"data \" + cell_data.className}>\n                        <div className=\"timing\">{numberWithCommas(cell_data.min)}  μs</div>\n                        <div className=\"timing-variation\">{formatPercentVariation(cell_data.variation)}</div>\n                        <div className=\"count\">{numberWithCommas(cell_data.count)} docs</div>\n                      </td>;\n                    }\n                  })\n                }\n              </tr>\n            })\n          }\n        </tbody>\n      </table>\n    </div>;\n  }\n\n}\n\n$(function () {\n  $.getJSON(process.env.PUBLIC_URL + \"/results.json\", (data) => {\n    var modes = [];\n    var engines = [];\n    var tags_set = new Set();\n    var tags = [];\n    for (var mode in data) {\n      modes.push(mode);\n    }\n    for (var engine in data[modes[0]]) {\n      engines.push(engine);\n    }\n    for (var query of data[modes[0]][engines[0]]) {\n      for (var tag of query.tags) {\n        tags_set.add(tag);\n      }\n    }\n    var tags = Array.from(tags_set);\n    tags.sort();\n    var el = document.getElementById(\"app-container\");\n    ReactDOM.render(<React.StrictMode>\n      <Benchmark data={data} tags={tags} modes={modes} engines={engines} />\n    </React.StrictMode>, el);\n  });\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}